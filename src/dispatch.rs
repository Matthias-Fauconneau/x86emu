use crate::{state::State, instruction::{Opcode, Operands}, interpreter::*};

pub fn dispatch(state: &mut State, (opcode, operand, _): &(Opcode, Operands, usize)) {
    match opcode {
        Opcode::Adc => adc(state, operand),
        Opcode::Add => add(state, operand),
        Opcode::And => and(state, operand),
        Opcode::Arithmetic => arithmetic(state, operand),
        Opcode::BitManipulation => bit_manipulation(state, operand),
        Opcode::Bt => bt(state, operand),
        Opcode::Bts => bts(state, operand),
        Opcode::Btr => btr(state, operand),
        Opcode::Btc => btc(state, operand),
        Opcode::Call => call(state, operand),
        Opcode::Cld => cld(state),
        Opcode::Cmova => cmova(state, operand),
        Opcode::Cmovae => cmovae(state, operand),
        Opcode::Cmovb => cmovb(state, operand),
        Opcode::Cmovbe => cmovbe(state, operand),
        Opcode::Cmove => cmove(state, operand),
        Opcode::Cmovg => cmovg(state, operand),
        Opcode::Cmovge => cmovge(state, operand),
        Opcode::Cmovl => cmovl(state, operand),
        Opcode::Cmovle => cmovle(state, operand),
        Opcode::Cmovne => cmovne(state, operand),
        Opcode::Cmovno => cmovno(state, operand),
        Opcode::Cmovnp => cmovnp(state, operand),
        Opcode::Cmovns => cmovns(state, operand),
        Opcode::Cmovo => cmovo(state, operand),
        Opcode::Cmovp => cmovp(state, operand),
        Opcode::Cmovs => cmovs(state, operand),
        Opcode::Cmp => cmp(state, operand),
        Opcode::Cpuid => cpuid(state),
        Opcode::Cvtpi2ps => cvtpi2ps(state, operand),
        Opcode::Cvttps2pi => cvttps2pi(state, operand),
        Opcode::CompareMulOperation => compare_mul_operation(state, operand),
        Opcode::Fadd => fadd(state, operand),
        Opcode::Fsub => fsub(state, operand),
        Opcode::Fmul => fmul(state, operand),
        Opcode::Fdiv => fdiv(state, operand),
        Opcode::Imul => imul(state, operand),
        Opcode::Int => int(state, operand),
        Opcode::Ja => ja(state, operand),
        Opcode::Jae => jae(state, operand),
        Opcode::Jb => jb(state, operand),
        Opcode::Jbe => jbe(state, operand),
        Opcode::Je => je(state, operand),
        Opcode::Jg => jg(state, operand),
        Opcode::Jge => jge(state, operand),
        Opcode::Jl => jl(state, operand),
        Opcode::Jle => jle(state, operand),
        Opcode::Jmp => jmp(state, operand),
        Opcode::Jne => jne(state, operand),
        Opcode::Jno => jno(state, operand),
        Opcode::Jnp => jnp(state, operand),
        Opcode::Jns => jns(state, operand),
        Opcode::Jo => jo(state, operand),
        Opcode::Jp => jp(state, operand),
        Opcode::Js => js(state, operand),
        Opcode::Lea => lea(state, operand),
        Opcode::Leave => leave(state),
        Opcode::Lidt => lidt(state, operand),
        Opcode::Lgdt => lgdt(state, operand),
        Opcode::Mov => mov(state, operand),
        Opcode::Movd => movd(state, operand),
        Opcode::Movps => movps(state, operand),
        Opcode::Movs => movs(state, operand),
        Opcode::Movsx => movsx(state, operand),
        Opcode::Movzx => movzx(state, operand),
        Opcode::Nop => (),
        Opcode::Or => or(state, operand),
        Opcode::Out => out(state),
        Opcode::Pop => pop(state, operand),
        Opcode::Popf => popf(state),
        Opcode::Push => push(state, operand),
        Opcode::Pushf => pushf(state),
        Opcode::RegisterOperation => register_operation(state, operand),
        Opcode::Ret => ret(state),
        Opcode::Lret => lret(state),
        Opcode::Rdmsr => rdmsr(state),
        Opcode::Sbb => sbb(state, operand),
        Opcode::ShiftRotate => shift_rotate(state, operand),
        Opcode::Std => std(state),
        Opcode::Stos => stos(state, operand),
        Opcode::Sub => sub(state, operand),
        Opcode::Test => test(state, operand),
        Opcode::Ud2 => ud2(state),
        Opcode::Wrmsr => wrmsr(state),
        Opcode::Xor => xor(state, operand),
        Opcode::Scas => scas(state, operand),
        Opcode::Cmpxchg => cmpxchg(state, operand),
        Opcode::Xchg => xchg(state, operand),
        Opcode::Syscall => syscall(state),
        Opcode::Seto => seto(state, operand),
        Opcode::Setno => setno(state, operand),
        Opcode::Setb => setb(state, operand),
        Opcode::Setae => setae(state, operand),
        Opcode::Sete => sete(state, operand),
        Opcode::Setne => setne(state, operand),
        Opcode::Setbe => setbe(state, operand),
        Opcode::Seta => seta(state, operand),
        Opcode::Sets => sets(state, operand),
        Opcode::Setns => setns(state, operand),
        Opcode::Setp => setp(state, operand),
        Opcode::Setnp => setnp(state, operand),
        Opcode::Setl => setl(state, operand),
        Opcode::Setge => setge(state, operand),
        Opcode::Setle => setle(state, operand),
        Opcode::Setg => setg(state, operand),
    }
}
